/*
 * This Java source file was generated by the Gradle 'init' task.
 */

/*
https://programmers.co.kr/learn/courses/30/lessons/42576?language=java

### 1. 이해
- 초 단위로 기록된 주식가격이 담긴 배열 prices
- 가격이 떨어지지 않은 기간은 몇 초??
- prices의 각 가격은 1 이상 10,000 이하인 자연수
- prices의 길이는 2 이상 100,000 이하

### 2. 계획
- 처음에는 반복문을 돌려야하나 생각함
- 스택? 큐?


### 3. 실행

### 4. 반성
- 실패
- 스택와 큐에 대해 다시 공부해야겠다.

 */
package find.prime.numbers;

import java.util.*;

public class App {
    public int[] solution(int[] prices) {
        ArrayList<Integer> stack = new ArrayList<Integer>();
        ArrayList<Integer> arrayList = new ArrayList<Integer>();

        for (int i = prices.length - 1;i >= 0;i--) {
            int count = prices.length - 1 - i;
            
            for (int j = 0;j < stack.size();j++) {
                if (prices[i] > stack.get(j)) {
                    count = count - stack.size() + j + 1;
                    break;
                }
            }

            stack.add(0, prices[i]);
            arrayList.add(0, count);
        }
        
        return arrayList.stream().filter(i -> i != null).mapToInt(i -> i).toArray();
    }

    public int[] oldSolution(int[] prices) { 
        ArrayList<Integer> stack = new ArrayList<Integer>();
        ArrayList<Integer> arrayList = new ArrayList<Integer>();

        for (int i = prices.length - 1;i >= 0;i--) {
            int count = 0;
            
            for (int j = 0;j < stack.size();j++) {
                count++;

                if (prices[i] > stack.get(j)) {
                    break;
                }
            }

            stack.add(0, prices[i]);
            arrayList.add(0, count);
        }

        return arrayList.stream().filter(i -> i != null).mapToInt(i -> i).toArray();
    }

    public static void main(String[] args) {
        int[] prices = {10, 7, 5, 6};
        System.out.println(Arrays.toString(new App().oldSolution(prices)));
    }
}
