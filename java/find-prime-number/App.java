/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package find.prime.numbers;

import java.util.ArrayList;

/*
 * ### 1. 이해
- 1은 소수가 아니다.
- 1 ~ n사이의 수를 입력가능하다
- n은 2이상 1,000,000이하의 자연수이다. 

### 2. 계획
- 1은 무조건 제외하는 한다.
- 짝수는 초기에 제거할 수 있도록 한다.
- n번 반복하여 소수인지 체크한다.


### 3. 실행

### 4. 반성

반성이 제일 중요합니다. 반성한 부분을 다음날 훈련에 반영합니다.

- 다른 방법으로 해결할 수는 없었는가? (다른 사람의 풀이도 참고하면 좋습니다.)
- 결과나 방법을 다른 문제에 활용할 수 있는가? (유용한 패턴은 계속 써먹을 수 있죠.) 
 */

public class App {
    public int solution(int n) {
        return filterArrayList(0, makeArrayList(n)).size() + 1;
    }

    public ArrayList<Integer> filterArrayList(int index, ArrayList<Integer> arrayList) {
        if (index >= arrayList.size()) {
            return arrayList;
        }

        ArrayList<Integer> filteredArrayList = new ArrayList<Integer>();

        arrayList.forEach(number -> {
            if (number % arrayList.get(index) != 0) {
                filteredArrayList.add(number);
            } else if (number == arrayList.get(index)) {
                filteredArrayList.add(number);
            }
        });

        return filterArrayList(index + 1, filteredArrayList);
    }

    public ArrayList<Integer> makeArrayList(int number) {
        ArrayList<Integer> numberArrayList = new ArrayList<Integer>();

        for (int i = 3;i <= number;i = i + 2) {
            numberArrayList.add(i);
        }

        return numberArrayList;
    }

    public static void main(String[] args) {
        System.out.println(new App().filterArrayList(0, new App().makeArrayList(30)));
    }
}
